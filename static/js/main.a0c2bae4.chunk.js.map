{"version":3,"sources":["services/api.js","components/LoadingSpining/index.js","components/ProductList/index.js","pages/main/index.js","components/ProductInfo/index.js","pages/product/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","LoadingSpining","className","ProductList","props","products","productInfo","page","prevPage","nextPage","map","product","key","_id","title","description","to","disabled","onClick","pages","Main","state","loading","loadProducts","a","async","get","response","data","docs","setState","pageNumber","this","console","log","Component","ProductInfo","href","url","Product","id","match","params","p","Routes","exact","path","component","Header","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0c2bae4.chunk.js","sourcesContent":["import  axios from 'axios';\r\n\r\nconst api = axios.create({ baseURL: 'https://rocketseat-node.herokuapp.com/api'});\r\n\r\nexport default api;","import React, { Component } from 'react';\r\n\r\nimport './styles.css';\r\n\r\nconst LoadingSpining = () => (\r\n  <div className=\"loading\">\r\n    <i className=\"fa fa-spinner fa-spin\" />\r\n  </div>\r\n);\r\n\r\nexport default LoadingSpining","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './styles.css';\r\n\r\nconst ProductList = ({products, productInfo, page, prevPage, nextPage} = this.props) => (\r\n  <div className=\"product__list-item\">\r\n    {products.map(product => (\r\n      <article key={product._id}>\r\n        <strong>{product.title}</strong>\r\n        <p>{product.description}</p>\r\n        <Link to={`/products/${product._id}`}>Acessar</Link>\r\n      </article>\r\n    ))}\r\n    <div className=\"actions\">\r\n      <button disabled={ page === 1 } onClick={prevPage}>Anterior</button>\r\n      <button disabled={ page === productInfo.pages } onClick={nextPage}>Próximo</button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ProductList","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\nimport LoadingSpining from '../../components/LoadingSpining';\r\nimport ProductList from '../../components/ProductList';\r\n\r\nimport \"./styles.css\";  \r\n\r\nexport default class Main extends Component{\r\n\r\n  state = {\r\n    products: [],\r\n    productInfo: {},\r\n    page: 1,\r\n    loading: false\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.loadProducts();\r\n  }\r\n\r\n  loadProducts = async (page = 1) =>{\r\n    const response = await api.get(`/products?page=${page}`)\r\n\r\n    const { docs, ...productInfo } = response.data\r\n\r\n    this.setState({ products: docs, productInfo, page, loading: true })\r\n\r\n\r\n  }\r\n\r\n  // life cycle\r\n  // - quando o componente é exibido em tela\r\n  // componentDidMount(){}\r\n  \r\n  prevPage = () => {\r\n    const { page, productInfo } = this.state;\r\n\r\n    if(page === 1) return\r\n\r\n    const pageNumber = page - 1;\r\n  \r\n    this.loadProducts(pageNumber);\r\n  }\r\n\r\n  nextPage = () => {\r\n    const { page, productInfo } = this.state;\r\n\r\n    if(page === productInfo.pages) return\r\n\r\n    const pageNumber = page + 1;\r\n\r\n    this.loadProducts(pageNumber);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { products, page, productInfo, loading } = this.state;\r\n\r\n    console.log(this.state)\r\n    console.log(this.state.products)\r\n    return (  \r\n      <div className=\"product__list\">\r\n        {loading ? <ProductList products={products} page={page} productInfo={productInfo} prevPage={this.prevPage} nextPage={this.nextPage}/>  : <LoadingSpining /> } \r\n      </div>\r\n      // \r\n    ) \r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport './styles.css'\r\n\r\nconst ProductInfo = ({product} = this.props) => (\r\n  <div className='product__info'>\r\n    <h1>{product.title}</h1>\r\n    <p>{product.description}</p>\r\n    <p>\r\n      URL: <a href={product.url}>{product.url}</a>\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default ProductInfo","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\nimport { Link } from 'react-router-dom';\r\nimport LoadingSpining from '../../components/LoadingSpining'; \r\nimport ProductInfo from '../../components/ProductInfo'; \r\n\r\nimport \"./styles.css\";  \r\n\r\nexport default class Product extends Component {\r\n  state = {\r\n    product: {},\r\n    loading: false\r\n  }\r\n  \r\n  async componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n\r\n    const response = await api.get(`/products/${id}`)\r\n\r\n    this.setState({product: response.data, loading: true});\r\n  }\r\n\r\n  render () {\r\n    const { product, loading } = this.state;\r\n\r\n    return (\r\n      <div className=\"product__container\">\r\n        {loading ? <ProductInfo product={product} p/>  : <LoadingSpining /> } \r\n        <Link className=\"button--back\" to={`/`}>Voltar</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport Main from './pages/main';\r\nimport Product from './pages/product';\r\n\r\nconst Routes = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n    <Route exact path=\"/\" component={Main} />\r\n    <Route path=\"/products/:id\" component={Product} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Routes;","import React, { Component } from 'react';\r\nimport \"./styles.css\"\r\n\r\nconst Header = () => (\r\n  <header id=\"main-header\">JSHunt </header>\r\n);\r\n\r\nexport default Header\r\n\r\n// -- Usar classe em conceito de estado\r\n// class Header extends Component {\r\n//   render(){\r\n//     return <h1>Hello</h1>\r\n//   }\r\n// }","import React, { Component } from 'react';\nimport Routes from './routes';\n\nimport \"./styles.css\"\n\nimport Header from './components/Header'\nimport Main from './pages/main';\nimport { Route } from 'react-router-dom';\n\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Routes />\n  </div>\n);\n\n// - Sem routes\n// const App = () => (\n//   <div className=\"App\">\n//     <Header />\n//     <Main />\n//   </div>\n// );\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//      <h1>Hello world</h1>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}